import java.util.Random;
import java.util.Scanner;

class Battle {
    private Trainer trainer;
    private AutoGeneratedTrainer AGTrainer;
    private Trainer[] test = new Trainer[2];

    Battle (Trainer trainer, AutoGeneratedTrainer AGTrainer) {
        this.trainer = trainer;
        this.AGTrainer = AGTrainer;
        this.test[0] = trainer;
        this.test[1] = AGTrainer;
    }

    public void battle () {
        int index = 1;
        if (!preBattle()) return;

        while (this.trainer.getMonster().getHp() > 0 && this.AGTrainer.getMonster().getHp() > 0) {
            System.out.println(index + "ターン");
            attack();

            index += 1;
        }
        this.levelUp();
    }

    public boolean preBattle () {
        Scanner scan = new Scanner(System.in);
        System.out.println(this.trainer.getMonster().getName() + " vs " + this.AGTrainer.getMonster().getName() + " 実施しますか？( yes / no )");
        String isBattle = scan.next();

        if (isBattle.equals("yes")) {
            System.out.println();
            System.out.println("==========");
            System.out.println(this.trainer.getMonster().getName() + " vs " + this.AGTrainer.getMonster().getName() + " バトル開始");
            System.out.println("==========");
            System.out.println();
            return true;
        }

        System.out.println(this.AGTrainer.getName() + "は静かに立ち去った..");
        return false;
    }

    public void attack () {
        int attackMonster = new Random().nextInt(2);
        int skillNum = new Random().nextInt(2);
        System.out.println(this.test[attackMonster].getMonster().getName() + " の " + this.test[attackMonster].getMonster().getSkills().get(skillNum) + " 攻撃 ");
        damage(attackMonster);
        System.out.println();
        System.out.println("----------");
        System.out.println();
    }

    public void damage (int attackMonster) {
        int damage = new Random().nextInt(50);
        switch (attackMonster) {
            case 0:
                System.out.println(this.AGTrainer.getName() + " の " + this.AGTrainer.getMonster().getName() + "　は、" + damage + " のダメージ");
                if (this.AGTrainer.getMonster().getHp() >= damage) {
                    this.AGTrainer.getMonster().setHp(this.AGTrainer.getMonster().getHp() - damage);
                } else {
                    this.AGTrainer.getMonster().setHp(0);
                }
                System.out.println(this.AGTrainer.getMonster().getName() + "のHPは" + this.AGTrainer.getMonster().getHp() + "になった");
                break;
            case 1:
                System.out.println(this.trainer.getName() + " の " + this.trainer.getMonster().getName() + "　は、" + damage + " のダメージ");
                if (this.trainer.getMonster().getHp() >= damage) {
                    this.trainer.getMonster().setHp(this.trainer.getMonster().getHp() - damage);
                } else {
                    this.trainer.getMonster().setHp(0);
                }
                System.out.println(this.trainer.getMonster().getName() + "のHPは" + this.trainer.getMonster().getHp() + "になった");
                break;
        }
    }

    public void levelUp () {
        if (this.trainer.getMonster().getHp() > 0) {
            System.out.println(this.AGTrainer.getMonster().getName() + " は瀕死になった..");
            System.out.println(this.trainer.getMonster().getName() + " の勝利！！");
            this.trainer.getMonster().setLevel(this.trainer.getMonster().getLevel() + 1);
            System.out.println(this.trainer.getMonster().getName() + " の Level が " + this.trainer.getMonster().getLevel() + " になった");
        } else if (this.AGTrainer.getMonster().getHp() > 0) {
            System.out.println(this.trainer.getMonster().getName() + " は瀕死になった..");
            System.out.println(this.AGTrainer.getMonster().getName() + " の勝利！！");
            this.AGTrainer.getMonster().setLevel(this.AGTrainer.getMonster().getLevel() + 1);
            System.out.println(this.AGTrainer.getMonster().getName() + " の Level が " + this.AGTrainer.getMonster().getLevel() + " になった");
        }
    }
}
