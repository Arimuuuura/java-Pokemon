import java.util.Random;
import java.util.Scanner;

class Battle {
    private Trainer trainer;
    private AutoGeneratedTrainer AGTrainer;
    private Trainer[] trainersArray = new Trainer[2];

    Battle (Trainer trainer, AutoGeneratedTrainer AGTrainer) {
        this.trainer = trainer;
        this.AGTrainer = AGTrainer;
        this.trainersArray[0] = trainer;
        this.trainersArray[1] = AGTrainer;
    }

    public void battle () {
        int index = 1;
        if (!preBattle()) return;

        while (this.trainer.getMonster().getHp() > 0 && this.AGTrainer.getMonster().getHp() > 0) {
            System.out.println(index + "ターン");
            attack();

            index += 1;
        }
        this.levelUp();
    }

    public boolean preBattle () {
        Scanner scan = new Scanner(System.in);
        System.out.println(this.trainer.getMonster().getName() + " vs " + this.AGTrainer.getMonster().getName() + " 実施しますか？( yes / no )");
        String isBattle = scan.next();

        if (isBattle.equals("yes")) {
            System.out.println();
            System.out.println("==========");
            System.out.println(this.trainer.getMonster().getName() + " vs " + this.AGTrainer.getMonster().getName() + " バトル開始");
            System.out.println("==========");
            System.out.println();
            return true;
        }

        System.out.println(this.AGTrainer.getName() + "は静かに立ち去った..");
        return false;
    }

    public void attack () {
        int attackMonster = new Random().nextInt(2);
        int skillNum = new Random().nextInt(2);
        System.out.println(this.trainersArray[attackMonster].getMonster().getName() + " の " + this.trainersArray[attackMonster].getMonster().getSkills().get(skillNum) + " 攻撃 ");
        damage(attackMonster);
        System.out.println();
        System.out.println("----------");
        System.out.println();
    }

    public void damage (int attackMonster) {
        int damage = new Random().nextInt(50);
        switch (attackMonster) {
            case 0:
                printDamage(this.AGTrainer, damage);
                break;
            case 1:
                printDamage(this.trainer, damage);
                break;
        }
    }

    public void printDamage (Trainer defenders, int damage) {
        System.out.println(defenders.getName() + " の " + defenders.getMonster().getName() + "　は、" + damage + " のダメージ");
        if (defenders.getMonster().getHp() >= damage) {
            defenders.getMonster().setHp(defenders.getMonster().getHp() - damage);
        } else {
            defenders.getMonster().setHp(0);
        }
        System.out.println(defenders.getMonster().getName() + "のHPは" + defenders.getMonster().getHp() + "になった");
    }

    public void levelUp () {
        if (this.trainer.getMonster().getHp() > 0) {
            printLevelUpEvent(this.trainer, this.AGTrainer);
        } else if (this.AGTrainer.getMonster().getHp() > 0) {
            printLevelUpEvent(this.AGTrainer, this.trainer);
        }
    }

    public void printLevelUpEvent (Trainer winner, Trainer loser) {
        System.out.println(loser.getMonster().getName() + " は瀕死になった..");
        System.out.println(winner.getMonster().getName() + " の勝利！！");
        winner.getMonster().printMonster();
        loser.getMonster().printMonster();
        winner.getMonster().setLevel(winner.getMonster().getLevel() + 1);
        System.out.println(winner.getMonster().getName() + " の Level が " + winner.getMonster().getLevel() + " になった");
        winner.setLevel(winner.getLevel() + 1);
        System.out.println(winner.getName() + " の Level が " + winner.getLevel() + " になった");
    }
}
